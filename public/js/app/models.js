var App, Component;

App = window.App;

App.ComponentModel = Component = (function() {

  function Component(attributes) {
    _.extend(this, this.defaults);
    _.extend(this, attributes);
    console.log("component model:", this);
  }

  Component.prototype.defaults = {
    "type": "text",
    "text": "[empty]",
    "url": "[empty]",
    "description": "[empty]",
    "title": "[empty]"
  };

  return Component;

})();

App.ProjectModel = Backbone.Model.extend({
  "defaults": {
    "name": "Untitled",
    "description": "",
    "com_length": 0,
    "components": []
  },
  initialize: function() {
    if (this.get("name")) {
      this.nameURI();
    }
    if (!this.has("com_length")) {
      return this.set("com_length", 0);
    }
  },
  nameURI: function() {
    var name, uri;
    name = this.get("name");
    name = name.replace(/ /g, "_");
    this.set("uri", name);
    uri = this.get("uri");
    return uri;
  },
  components: function() {
    return this.get("components");
  },
  isSorted: function() {
    var list;
    list = this.components();
    if (_.has(list[0], "order")) {
      return true;
    }
    return false;
  },
  getIndexOfComponent: function(id) {
    var index, list, plucked;
    list = this.get("components");
    plucked = _.pluck(list, "id");
    index = _.indexOf(plucked, id);
    return index;
  },
  getComponent: function(filter) {
    var criteria, list, result, search;
    list = this.get("components");
    criteria = _.keys(filter)[0];
    search = _.values(filter)[0];
    result = _.find(list, function(element, index, list) {
      return element[criteria] === search;
    });
    return result;
  },
  hasComponents: function() {
    var components;
    components = this.get("components");
    if (components.length !== 0) {
      return true;
    }
    return false;
  },
  _newComponent: function(attributes) {
    var c, list, modelId;
    modelId = this.get("id");
    list = this.get("com_length");
    list += 1;
    Component = App.ComponentModel;
    attributes = _.extend({
      "parent": modelId,
      "id": "com_" + list
    }, attributes);
    c = new Component(attributes);
    return c;
  },
  addComponent: function(attributes) {
    var component, l, list;
    component = this._newComponent(attributes);
    l = (this.get("com_length")) + 1;
    list = this.get("components");
    list.push(component);
    this.set("com_length", l);
    this.set("components", list);
    return this.save();
  },
  removeComponent: function(id) {
    var index, list, plucked;
    list = this.get("components");
    plucked = _.pluck(list, "id");
    index = _.indexOf(plucked, id);
    list = _.without(list, list[index]);
    this.set("components", list);
    return this.save();
  },
  setComponent: function(id, newData) {
    var c, callbax, index, list, oldComponent;
    list = this.get("components");
    oldComponent = this.getComponent({
      "id": id
    });
    if (!oldComponent) {
      return;
    }
    c = _.extend(oldComponent, newData);
    index = this.getIndexOfComponent(id);
    list[index] = c;
    this.set("components", list);
    callbax = {
      error: function(e) {
        console.warn("Component did not save:", e);
        return $(".edit-component-menu li.save-progress").text("Oops! Did Not Save!");
      },
      success: function() {
        return $(".edit-component-menu li.save-progress").text("Saved.");
      }
    };
    console.log("saving..");
    return this.save({}, callbax);
  }
});

// Generated by CoffeeScript 1.5.0-pre
